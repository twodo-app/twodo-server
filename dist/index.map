{"version":3,"sources":["api/test/todos.js","api/test/index.js","api/v1/todos.js","api/v1/index.js","api/index.js","index.js"],"names":["module","exports","get","all","db","req","res","json","filtered","Object","keys","query","byID","params","id","post","todos","require","api","test","v1","version","console","log","express","lowdb","Adapter","process","env","DB_NAME","PORT","VERSION","ROOT","defaults","write","app","listen"],"mappings":"AEAAA,OAAOC,QAAU,CACfC,IAAK,CACHC,IAAKC,GAAM,CAACC,EAAKC,KACfA,EAAIC,KAAK,0BAGXC,SAAUJ,GAAM,CAACC,EAAKC,KACpBA,EAAIC,2CAA2CE,OAAOC,KAAKL,EAAIM,WAGjEC,KAAOR,GAAM,CAACC,EAAKC,KACjBA,EAAIC,sCAAsCF,EAAIQ,OAAOC,QAGzDC,KAAMX,GAAM,CAACC,EAAKC;AFdpBN,OAAOC,QAAU,CACfC,IAAK,CACHC,IAAKC,GAAM,CAACC,EAAKC,KACfA,EAAIC,KAAK,0BAGXC,SAAUJ,GAAM,CAACC,EAAKC,KACpBA,EAAIC,2CAA2CE,OAAOC,KAAKL,EAAIM,WAGjEC,KAAOR,GAAM,CAACC,EAAKC,KACjBA,EAAIC,sCAAsCF,EAAIQ,OAAOC,QAGzDC,KAAMX,GAAM,CAACC,EAAKC;;ACdpBN,OAAOC,QAAU,CACfe,MAAOC,QAAQ;;AEDjBjB,OAAOC,QAAU,CACfe,MAAOC,QAAQ;;ACDjB,MAAMC,EAAM,CACVC,KAAMF,QAAQ,mBACdG,GAAIH,QAAQ,kBAGdjB,OAAOC,QAAWoB,CAAAA,IACRA,OAAAA,GACD,IAAA,OAEIH,OADPI,QAAQC,IAAI,oBACLL,EAAIC,KACR,IAAA,KAEID,OADPI,QAAQC,IAAI,kBACLL,EAAIE,GACb,QACSF,OAAAA,EAAIC;;ACZjB,MAAMK,EAAYP,QAAQ,WACpBQ,EAAYR,QAAQ,SACpBS,EAAoC,SAAxBC,QAAQC,IAAIP,QAC1BJ,QAAQ,yBACRA,QAAQ,2BAINY,EAAU,KACVC,EAAU,IACVC,EAAUJ,QAAQC,IAAIG,QACtBC,UAAkBD,IAMlB3B,EAAKqB,EAAO,IAAIC,EAAS,YAI/BtB,EAAG6B,SAAS,CAAEjB,MAAO,KAClBkB,QAIH,MAAMC,EAAMX,IACNN,EAAMD,QAAQ,QAARA,CAAiBc,GAE7BI,EAAIjC,OAAO8B,UAAcd,EAAIF,MAAMd,IAAIC,IAAIC,IAC3C+B,EAAIjC,OAAO8B,kBAAsBd,EAAIF,MAAMd,IAAIM,SAASJ,IACxD+B,EAAIjC,OAAO8B,cAAkBd,EAAIF,MAAMd,IAAIU,KAAKR,IAEhD+B,EAAIpB,QAAQiB,UAAcd,EAAIF,MAAMD,KAAKX,IAEzC+B,EAAIC,OA1BY,IA0BC,KACfd,QAAQC,IAAK","file":"index.map","sourceRoot":"../src","sourcesContent":["module.exports = {\n  get: {\n    all: db => (req, res) => {\n      res.json('This is all the todos')\n    },\n    //\n    filtered: db => (req, res) => {\n      res.json(`This is all the todos filtered by: ${Object.keys(req.query)}`)\n    },\n    //\n    byID : db => (req, res) => {\n      res.json(`This is the todo with the id: ${req.params.id}`)\n    }\n  },\n  post: db => (req, res) => {\n    \n  }\n}","module.exports = {\n  todos: require('./todos.js')\n}","module.exports = {\n  get: {\n    all: db => (req, res) => {\n      res.json('This is all the todos')\n    },\n    //\n    filtered: db => (req, res) => {\n      res.json(`This is all the todos filtered by: ${Object.keys(req.query)}`)\n    },\n    //\n    byID : db => (req, res) => {\n      res.json(`This is the todo with the id: ${req.params.id}`)\n    }\n  },\n  post: db => (req, res) => {\n    \n  }\n}","module.exports = {\n  todos: require('./todos.js')\n}","const api = {\n  test: require('./test/index.js'),\n  v1: require('./v1/index.js')\n}\n\nmodule.exports = (version => {\n  switch (version) {\n    case 'test':\n      console.log('loading test api')\n      return api.test\n    case 'v1':\n      console.log('loading v1 api')\n      return api.v1\n    default:\n      return api.test\n  }\n})","//---------------------------------------------------------\n// NPM Packages\nconst express   = require('express')                  // express is our json server\nconst lowdb     = require('lowdb')                    // lowdb is a lightweight json db\nconst Adapter   = process.env.version === 'test'\n  ? require('lowdb/adapters/Memory')\n  : require('lowdb/adapters/FileSync')  \n\n//---------------------------------------------------------\n// Constants\nconst DB_NAME = 'db'\nconst PORT    = 3000\nconst VERSION = process.env.VERSION\nconst ROOT    = `/api/${VERSION}`\n\n//---------------------------------------------------------\n// db\n// Open the database using the FileSync adapter. Every operation\n// in the database will be synchronous.\nconst db = lowdb( new Adapter(`${DB_NAME}.json`))\n\n// Write some sensible defaults to the database if it is\n// empty.\ndb.defaults({ todos: [] })\n  .write()\n\n//---------------------------------------------------------\n// app\nconst app = express()\nconst api = require('./api')(VERSION)\n\napp.get(`${ROOT}/todos`, api.todos.get.all(db))\napp.get(`${ROOT}/todos/filter?`, api.todos.get.filtered(db))\napp.get(`${ROOT}/todos/:id`, api.todos.get.byID(db))\n\napp.post(`${ROOT}/todos`, api.todos.post(db))\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`)\n})"]}