{"version":3,"sources":["api/status.js","api/test/todos.js","api/test/index.js","api/v1/todos.js","api/v1/index.js","api/index.js","index.js"],"names":["module","exports","OK","CREATED","NO_CONTENT","NOT_MODIFIED","BAD_REQUEST","UNAUTHORISED","FORBIDDEN","NOT_FOUND","CONFLICT","INTERNAL_SERVER_ERROR","shortid","require","get","all","db","_","res","todos","value","status","json","filtered","req","Object","keys","query","byID","todo","find","id","params","undefined","post","create","body","sendStatus","generate","title","description","priority","snoozed","complete","push","write","update","key","assign","api","test","v1","version","console","log","express","bodyParser","lowdb","Adapter","process","env","VERSION","DB_NAME","PORT","ROOT","defaults","app","use","listen"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["module.exports = {\n  // 2XX - Success\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  // 3XX - Redirection\n  NOT_MODIFIED: 304,\n  // 4XX - Client Error\n  BAD_REQUEST: 400,\n  UNAUTHORISED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  CONFLICT: 409,\n  // 5XX - Server Error\n  INTERNAL_SERVER_ERROR: 500\n}","const shortid = require('shortid')\nconst { \n  OK, \n  CREATED,\n  BAD_REQUEST, \n  NOT_FOUND } = require('../status.js')\n\nmodule.exports = {\n  get: {\n    all: db => (_, res) => {\n      const todos = db.get('todos')\n        .value()\n\n      res.status(OK).json(todos)\n    },\n    //\n    filtered: db => (req, res) => {\n      res.json(`This is all the todos filtered by: ${Object.keys(req.query)}`)\n    },\n    //\n    byID : db => (req, res) => {\n      const todo = db.get('todos')\n        .find({ id: req.params.id })\n        .value()\n\n      todo == undefined\n        ? res.status(NOT_FOUND).json({})\n        : res.status(OK).json(todo)\n    }\n  },\n  post: {\n    create: db => (req, res) => {\n      if (!req.body)\n        return res.sendStatus(BAD_REQUEST)\n\n      const todo = {\n        id          : shortid.generate(),\n        title       : req.body.title || '',\n        description : req.body.description || '',\n        priority    : req.body.priority || 0,\n        snoozed     : req.body.snoozed || false,\n        complete    : req.body.complete || false\n      }\n\n      db.get('todos').push(todo).write()\n\n      res.status(CREATED).json(todo)\n    },\n    //\n    update: db => (req, res) => {\n      const todo = db.get('todos')\n        .find({ id: req.params.id })\n        .value()\n\n      if (!todo)\n        return res.sendStatus(NOT_FOUND)\n\n      for (const key in todo) {\n        todo[key] = req.body[key] || todo[key]\n      }\n\n      db.get('todos') \n        .find({ id: req.params.id })\n        .assign(todo)\n        .write()\n\n      res.status(OK).json(todo)\n    }\n  }\n}","module.exports = {\n  todos: require('./todos.js')\n}","module.exports = {\n  get: {\n    all: db => (req, res) => {\n      res.json('This is all the todos')\n    },\n    //\n    filtered: db => (req, res) => {\n      res.json(`This is all the todos filtered by: ${Object.keys(req.query)}`)\n    },\n    //\n    byID : db => (req, res) => {\n      res.json(`This is the todo with the id: ${req.params.id}`)\n    }\n  },\n  post: db => (req, res) => {\n    \n  }\n}","module.exports = {\n  todos: require('./todos.js')\n}","const api = {\n  test: require('./test/index.js'),\n  v1: require('./v1/index.js')\n}\n\nmodule.exports = (version => {\n  switch (version) {\n    case 'test':\n      console.log('loading test api')\n      return api.test\n    case 'v1':\n      console.log('loading v1 api')\n      return api.v1\n    default:\n      return api.test\n  }\n})","//---------------------------------------------------------\n// NPM Packages\nconst express     = require('express')              // express is our json server\nconst bodyParser  = require('body-parser')          // express middleware for parsing json bodies\nconst shortid     = require('shortid')              // UUID generator\nconst lowdb       = require('lowdb')                // lowdb is a lightweight json db\nconst Adapter     = process.env.VERSION === 'test'\n  ? require('lowdb/adapters/Memory')                // In test mode the db is saved in memory\n  : require('lowdb/adapters/FileSync')              // Otherwise write the db to disk\n\n//---------------------------------------------------------\n// Constants\nconst DB_NAME = 'db'\nconst PORT    = process.env.PORT || 3000\nconst VERSION = process.env.VERSION\nconst ROOT    = `/api/${VERSION}`\n\n//---------------------------------------------------------\n// db\n// Open the database using the FileSync adapter. Every operation\n// in the database will be synchronous.\nconst db = lowdb( new Adapter(`${DB_NAME}.json`))\n\nVERSION !== 'test'\n  ? db.defaults({ todos: [] }).write()\n  : db.defaults({\n    todos: [\n      { id: shortid.generate(), title: 'Do a twodoo', description: '', priority: 4, snoozed: false, complete: false },\n      { id: shortid.generate(), title: 'Do a mewtwo', description: '', priority: 2, snoozed: false, complete: false },\n      { id: shortid.generate(), title: 'Do a poopoo', description: '', priority: 3, snoozed: false, complete: false },\n      { id: shortid.generate(), title: 'Do a bamboo', description: '', priority: 0, snoozed: false, complete: false }\n    ]\n  }).write()\n\n//---------------------------------------------------------\n// app\nconst app = express()\n      app.use(bodyParser.json())  \n\nconst api = require('./api')(VERSION)\n\n\napp.get(`${ROOT}/todos`, api.todos.get.all(db))\napp.get(`${ROOT}/todos/filter?`, api.todos.get.filtered(db))\napp.get(`${ROOT}/todos/:id`, api.todos.get.byID(db))\n\napp.post(`${ROOT}/todos`, api.todos.post.create(db))\napp.post(`${ROOT}/todos/:id`, api.todos.post.update(db))\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`)\n})"]}