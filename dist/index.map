{"version":3,"sources":["api/todo.js","api/status.js","api/test/todos.js","api/test/index.js","api/v1/todos.js","api/v1/index.js","api/index.js","index.js"],"names":["shortid","require","completeSchema","id","String","title","description","priority","Number","created","due","estimated","timetaken","snoozed","Boolean","complete","requiredSchema","validateRequired","todo","Object","keys","reduce","valid","key","validateComplete","create","generate","mock","Math","random","Date","now","module","exports","OK","CREATED","NO_CONTENT","NOT_MODIFIED","BAD_REQUEST","UNAUTHORISED","FORBIDDEN","NOT_FOUND","CONFLICT","INTERNAL_SERVER_ERROR","Todo","get","all","db","_","res","todos","value","status","json","filtered","req","filters","query","push","x","JSON","parse","console","log","isNaN","parseInt","substring","predicate","filter","length","byID","find","params","undefined","post","body","sendStatus","write","update","assign","api","test","v1","version","express","bodyParser","cors","lowdb","Adapter","process","env","VERSION","DB_NAME","PORT","ROOT","defaults","app","use","listen"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["//---------------------------------------------------------\n// NPM Packages\nconst shortid = require('shortid') // UUID generator\n\n//---------------------------------------------------------\nconst completeSchema = {\n  id          : String,\n  title       : String,\n  description : String,\n  priority    : Number,\n  created     : Number,\n  due         : Number,\n  estimated   : Number,\n  timetaken   : Number,\n  snoozed     : Boolean,\n  complete    : Boolean,\n}\n\nconst requiredSchema = {\n  title       : String,\n  description : String,\n  priority    : Number,\n  created     : Number,\n  due         : Number,\n  estimated   : Number,\n}\n\n//---------------------------------------------------------\n// A simple validation that checks the types of each field\n// in the todo. In production this should be more advanced,\n// checking both the type and the value, but fo test purposes\n// this is servicable.\nconst validateRequired = todo =>\n  Object.keys(requiredSchema)\n    .reduce((valid, key) => typeof todo[key] === typeof requiredSchema[key]() && valid, true)\n\nconst validateComplete= todo =>\n  Object.keys(completeSchema)\n    .reduce((valid, key) => typeof todo[key] === typeof completeSchema[key]() && valid, true)\n\n// Takes a todo with all the fields outlined in requiredSchema\n// and fills in the rest with some sensible defaults.\nconst create = todo => ({\n  id          : shortid.generate(),\n  title       : todo.title,\n  description : todo.description,\n  priority    : todo.priority,\n  created     : todo.created,\n  due         : todo.due,\n  estimated   : todo.estimated,\n  timetaken   : 0,\n  snoozed     : false,\n  complete    : false\n})\n\n// Used to generate some mock todos for testing purposes.\n// This lets us test some api GET requests without having\n// to POST some todos from the client first.\nconst mock = () => create({\n  title       : 'I am a mock twodo',\n  description : 'Use me to test the API!',\n  priority    : (Math.random() * 3) | 0,\n  created     : Date.now(),\n  due         : Date.now() + (Math.random() * 100000),\n  estimated   : Date.now() + (Math.random() * 100000)\n})\n\n//---------------------------------------------------------\nmodule.exports = { validateRequired, validateComplete, create, mock }","module.exports = {\n  // 2XX - Success\n  OK: 200,\n  CREATED: 201,\n  NO_CONTENT: 204,\n  // 3XX - Redirection\n  NOT_MODIFIED: 304,\n  // 4XX - Client Error\n  BAD_REQUEST: 400,\n  UNAUTHORISED: 401,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  CONFLICT: 409,\n  // 5XX - Server Error\n  INTERNAL_SERVER_ERROR: 500\n}","const shortid = require('shortid')\nconst { \n  OK, \n  CREATED,\n  BAD_REQUEST, \n  NOT_FOUND } = require('../status.js')\nconst Todo    = require('../todo.js')\n\nmodule.exports = {\n  get: {\n    // GET all todos in the database.\n    all: db => (_, res) => {\n      const todos = db.get('todos')\n        .value()  // It is important to end all db queries with either .value()\n                  // or .write() otherwise you won't get the data you were expecting!!\n\n      // Chain methods to set the response status code\n      // and then fire a response with the todos json as\n      // the body. \n      // It's important to call .json() last as it fires off\n      // the response.  \n      res.status(OK).json(todos)\n    },\n    // GET all todos and filter according to some query params.\n    filtered: db => (req, res) => {\n      const filters = []\n\n      if (req.query.complete === 'true' || req.query.complete === 'false')\n        filters.push(x => x.complete === JSON.parse(req.query.complete))\n  \n      if (req.query.snoozed === 'true' || req.query.complete === 'false')\n        filters.push(x => x.snoozed === JSON.parse(req.query.snoozed))\n\n      console.log(req.query)\n\n      if (req.query.priority) {\n        switch (req.query.priority[0]) {\n          case '>':\n            if (!isNaN( parseInt(req.query.priority.substring(1) )))\n              filters.push(x => x.priority > parseInt(req.query.priority))\n            break\n          case '<':\n            if (!isNaN( parseInt(req.query.priority.substring(1) )))\n              filters.push(x => x.priority < parseInt(req.query.priority))\n            break\n          default:\n            if (!isNaN( parseInt(req.query.priority )))\n              filters.push(x => x.priority === parseInt(req.query.priority))\n            break\n        }\n      }\n\n      const todos = \n        filters.reduce((todos, predicate) => todos.filter(predicate), db.get('todos')).value()\n\n      todos.length > 0\n        ? res.status(200).json(todos)\n        : res.status(404).json(todos)\n    },\n    // GET a specific todo by id\n    // In practice this isn't as useful as the POST counterpart.\n    byID : db => (req, res) => {\n      const todo = db.get('todos')\n        .find({ id: req.params.id })\n        .value()\n\n      todo == undefined\n        ? res.status(NOT_FOUND).json({})\n        : res.status(OK).json(todo)\n    }\n  },\n  post: {\n    // \n    create: db => (req, res) => {\n      // Return early if the request has no body.\n      if (!req.body)\n        return res.sendStatus(BAD_REQUEST)\n\n      // Validate the request body to check it has\n      // the required fields and types.\n      if (!Todo.validateRequired(req.body)) {\n        return res.sendStatus(BAD_REQUEST)\n      }\n\n      const todo = Todo.create(req.body)\n\n      db.get('todos').push(todo).write()\n\n      res.status(CREATED).json(todo)\n    },\n    //\n    update: db => (req, res) => {\n      const todo = db.get('todos')\n        .find({ id: req.params.id })\n        .value()\n\n      // Return early if the todo wasn't found.\n      // We can't update what doesn't exist!\n      if (!todo)\n        return res.sendStatus(NOT_FOUND)\n\n      // Return early if the request has no body.\n      if (!req.body)\n        return res.sendStatus(BAD_REQUEST)\n\n      // Validate the request body to check it has\n      // the required fields and types.\n      if (!Todo.validateComplete(req.body)) {\n        return res.sendStatus(BAD_REQUEST)\n      }\n\n      // Iterate over each key in the existing *todo* and update its\n      // value according to corresponding value in the request body. If\n      // the body doesn't have that particular key, just fall back to the\n      // existing todo data.\n      // This is a bad idea(tm) as important keys such as ID and date created\n      // can be overwritten. This should be handled better in production!!\n      for (const key in todo) {\n        todo[key] = req.body[key] || todo[key]\n      }\n\n      db.get('todos') \n        .find({ id: req.params.id })\n        .assign(todo)\n        .write()\n\n      res.status(OK).json(todo)\n    }\n  }\n}","// This file exists to provide a single export for\n// each api endpoint. Currently there is only /todos.\nmodule.exports = {\n  todos: require('./todos.js')\n}","module.exports = {\n  get: {\n    all: db => (req, res) => {\n      res.json('This is all the todos')\n    },\n    //\n    filtered: db => (req, res) => {\n      res.json(`This is all the todos filtered by: ${Object.keys(req.query)}`)\n    },\n    //\n    byID : db => (req, res) => {\n      res.json(`This is the todo with the id: ${req.params.id}`)\n    }\n  },\n  post: db => (req, res) => {\n    \n  }\n}","module.exports = {\n  todos: require('./todos.js')\n}","const api = {\n  test: require('./test/index.js'),\n  v1: require('./v1/index.js')\n}\n\n// Programmatically determine what version of api to expose.\n// This is necessary because expressions, including string \n// literals cannot be used in a require() call.\nmodule.exports = (version => {\n  switch (version) {\n    case 'test':\n      console.log('loading test api')\n      return api.test\n    case 'v1':\n      console.log('loading v1 api')\n      return api.v1\n    // Fall back to the test api if no version, or an invalid\n    // version is supplied. This should probably default to v1\n    // once in production.\n    default:\n      return api.test\n  }\n})","//---------------------------------------------------------\n// NPM Packages\nconst express     = require('express')              // express is our json server\nconst bodyParser  = require('body-parser')          // express middleware for parsing json bodies\nconst cors        = require('cors')                 // allows cross origin requests\nconst shortid     = require('shortid')              // UUID generator\nconst lowdb       = require('lowdb')                // lowdb is a lightweight json db\nconst Adapter     = process.env.VERSION === 'test'\n  ? require('lowdb/adapters/Memory')                // In test mode the db is saved in memory\n  : require('lowdb/adapters/FileSync')              // Otherwise write the db to disk\nconst Todo        = require('./api/todo.js')\n\n//---------------------------------------------------------\n// Constants\nconst DB_NAME = 'db'\nconst PORT    = process.env.PORT || 3000\nconst VERSION = process.env.VERSION\nconst ROOT    = `/api/${VERSION}`\n\n//---------------------------------------------------------\n// db\n// Open the database using the FileSync adapter. Every operation\n// in the database will be synchronous.\nconst db = lowdb( new Adapter(`${DB_NAME}.json`))\n\n// Generate some servicable defaults if we're running the test\n// version of the api. Otherwise initalise an empty database\n// if one does not already exist.\n// .defaults does *not* overwrite data in an existing database.\nVERSION !== 'test'\n  ? db.defaults({ todos: [] }).write()\n  : db.defaults({\n    todos: [ Todo.mock(), Todo.mock(), Todo.mock(), Todo.mock() ]\n  }).write()\n\n//---------------------------------------------------------\nconst app = express()\n// Parse 'application/json' request bodies as native json\napp.use(bodyParser.json())  \n// Allow cross origin requests in dev mode\nif (VERSION === 'test') app.use(cors())\n// Passing in VERSION lets the api module decide what version\n// of the api to expose. This is useful as a mock api for client\n// testing may not need to be the same as the api exposed in\n// production.  \nconst api = require('./api')(VERSION)\n\n// Handle GET requests\napp.get( `${ROOT}/todos`, api.todos.get.all(db) )\napp.get( `${ROOT}/todos/filter?`, api.todos.get.filtered(db) )\napp.get( `${ROOT}/todos/:id`, api.todos.get.byID(db) )\n// Handle POST requests\napp.post( `${ROOT}/todos`, api.todos.post.create(db) )\napp.post( `${ROOT}/todos/:id`, api.todos.post.update(db) )\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`)\n})"]}